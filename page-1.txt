A. Intro to the Project (1-2 parah)
    
    With growing IoT Application respective device data is also growing with similar rate. Each sensor have potential data which can be used to make important decision. Difficulty arises for a developer to keep track of this sensor data and use this data as input in its application.Managing algorithm, binding data and analysing the output are some big task developer has to take care. Aim of this platform is to provide the user with an environment which allows them to create application which can connect to / use location sensitive IoT devices   with ease.In addition to this, it also provides the capability to dynamically run user defined algorithms which make use of such devices. This IoT Application platform directly integrates with the IoT devices and is capable of performing remote actions on these devices
    
    1. Providing client with interface where one can upload their application, connect it to
    suitable IoT devices and run them on required sensor data.
    
    2. Client will be provided with:
    • UI based dashboard, where user can upload and run application.
    • Provide user with set of APIs
    • Algorithm scheduler service to run the application
    
    3. Upon running the application, platform provide user with the following capabilites.
    • Binding Service: Binding the sensor with the alogirthm.
    • Deployment Service: Running an executable in response to an event generated
    by algorithm during its course of execution.
    • Notification Service: Generating notification and pushing it to registered users
    of the platform.
    • Event Service: In addition to control services over IoT devices the platform pro-
    vides ability for the app to generate template actions over event generated by algo-
    rithm.
    • Scheduling Service: Platform also provides scheduling service which allows the
    user to periodically run their application.

B. Functional overview of Team’s module (1-2 parah. & Block diagram)
   

<Block Diagram danish sir>

Module-1 -> Platform Initializer:
    - Responsible to initialize all the available platform modules like Repository,Scheduler,Deployment manager,Sensor Manager etc.

Module-2 -> Application Manager:
    • Dashboard : User Interface to upload/deploy user application  
    • API: Set of APIs provided to user for deployment
    - This module will serve all request initially given by application developer. Comprises of Login,storing and retreiving alogrithms and meta file in .zip format,validating meta file and forwarding the same to scheduler

Module-3 -> Scheduler:
    - This module will be responsible to ask developer the scheduling information for algorithms provided.
    - Will be responsible to start and kill scheduled alogrithms on user specified time.

Module-4 -> Deployment Manager:
    -  Resposible for deploying algorithm instances stored in repository to run. Repository contain various configuration files which locate what packages to
      be deployed. It also take care of system where the algorithm need to be run.
   
    - This module is responsible for intializing the algorithm with configuration data
      provided using alogrithm configuration file.
    
    - Algorithm and Config file : This module fetches the raw algorithm from a repository. Reads the algorithm sensor parameter such as           <distance,Geolocation,SensorType>.
    
    - It then queries sensor manager which has information about all the sensor suggested
    with the platform.


Module-5 -> Node Manager:
    - Responsible for initiating node instances as requested by deployment manager.
    - Also reposible to run init.py
    init.py: Responsible for communication with scheduler, deployement manager and sensor manager.
    
Module-6 -> Sensor Manager:
    - This module is responsible for binding correct sensor data stream with corresponding algorithm.
    - Sensor Manager,Add sensor are the services provided by communication module
    - Will indetify IoT devices from the sensor database based
    upon the parameters.
   
Module-7 -> Monitoring and Fault Tolerance / Heartbeat Manager: 
    -  Each module will run a HM.py script responsible to share current state of machine and running process.
    -  This information will be stored in Heartbeat Manager, and actions will be taken in case machines gets down 
    
Module-8 -> Action Handler:
    • During the course of execution, output generated from alogrithm can be used
    to initiate an action defined in the action template, this action can be
    – Notification
    – Callback to an event
    – Command execution 

Module-9 -> Platform Repository and Application Repository:
    - Responsible to store module codes and node details where this module is running.    

Module-10 -> Application Registry:
    - Responsible to store all runtime information of algorithms,sensors , user login information, storing running instance details of application
    
