

Service: Platform Service ->(Authentication + Scheduling + LB + Depl + Senso + Sensor Reg) + User Service
Server: 




Platform Repository (By Default ON):
1. Start.sh (Script)
2. Machine Agent (PYthon Script)
3. config file --> Which Program to Run and Which are available IPs
4. Platform Code ---subfolder--> 1. Service Manager LifeCycle (Code + Config)
								 2. Server Manager LifeCycle (Code + Config)
								 3. Broker
								 4. 


Registry: -> Runtime Server Machines + Services User (Stats dump in Registry)
		  -> Sensor Details
		  -> Logging Information


Application Repository:
		--> User Name-1:
				--> Services-1
						---> Service-1_v1 ---> Code + Config
						---> Service-1_v2 ---> Code + Config

				--> Service-2
		--> User Name-2:





Start.sh --> this script will help to get remote access to machine using IP/port and will run scripts on that machine

Machine Agent --> This program will
				   1. Give Machine access to Platform Repository
				   2. Read CPU Stats of Machine --> using thread (Continuos)
				   3. Wait for request to run any program on this machine

Platform BootStrap: --> Intially this program will have access to Platform Repository
						1. SSH on two different Machines and run Machine Agent on them
						2. Request Machine Agent to Run Service LifeCycle Manager
						3. Request Machine Agent to Run Server LifeCycle Manager
						4. Send Service LifeCycle Manager list of services to start

Server Life Cycle MAnager: --> Request to Start a machine / Stop Machine
							--> Request <1,dep + MA,Registry>
							---> Limited Machines (5)


Service Life Cycle MAnager : (Docker Container)
							-> Start Service / Stop Service
							-> Request < Service Name , start > ----> server <1,Docker+Pythn, MA, Registry> 
																		<---------------------------------Topic
							-> Run Code (Scheduling)


Service List:
1. Authentication --> user unquiely identify (Unquie ID_ , )
2. Authorization Service -->
3. Scheduling Service
4. Request Manager --> USER Interaction (Request Manager)
5. Deployement Manager 
6. Sensor Manager --> Sensor Registration
7. Topology Manager --> Monitoring Service
					--> Logging Service
					--> Healthcare Service



1. User <----> Request Manager --> (Any Request generated by user ---> Where to Send)
				1. Logging Portal
				2. Upload Zip Format -->
				3. VAlidate 
				3. Dashboard ()

				Service-Name   Curr Status    Start Stop Schedule  Service Usage()
					a  				stop 		y								

				Request Type:
					1. <Start a Service>
					2. <Schedule,start,end> + config ----------> Start Time -----> ServiceLC 	
																 Stop Time ----> Service LC
					3.  <Stop Service>


2. Scheduling ---> User Dashboard ---> Input Start / End
								 --> Config 


Stats: ---> CPU Load 
Logs ---> CPU--Service-1 ne abhi tk kya kya kiya



M-1 M-2 M-3 (MA,Platform Service, User Service)
3. Monitoring Service --> 1. Topic (Monitor,) MA---> Monitor TOpic Dump Data 
						  2. Read Data from Monitor Topic ----> Well Format  form Registry Store)



4. Healthcare ---> Crash Machine (Registry Stats ---> M-1(Scheduling is Down),state/Instance) ---> Service Life Cycle ---> Launch Scheduling

5. Logging Service ---> Particular format me ---> Logs collect kr raha hai + Registry (work done till now)




4. Topology Manager ----> M-1 (Service-1,2,3) M-2 () ---> Service LC -> Request Close this M-1(service-1)


5. Sensor ---> Sensor Registration ---> Request Manager ---> Config File ---> Registry Sensor DEtails
		 ---> Sensor MAnager ----> 
		 		1. Request < Sensor unique Propertie> ----> Instance/Thread --> Temp Topic --> Sensor GW/tpic Read ---> 
		 		Processing Data ---> Time ---> Temp Topic Dump....


6. DM ---> Service-1 ----> Service-1 + Sensor + Environment + ..
						---> M-1 (Docker + Enviornment + Topic + Algo Run)
						-------------------------------------------- Yaha par bhi decide (LB)




Big Picture (Annotate)
Communication Model				RM 					Schedule              
						---------------------------------------
Meta Data Flow
Registry / Repository



Teams Number :

Team-1 :   Communication Model 												---> Pratik / Tirth
Team-2 :   Topology Manager + Logging + HealthCare     						->> Neeraj / Abhinav
Team-3 :   Service Life Cycle + Server Life Cycle + Scheduler   				---> Jay/Danish
Team-4 :   LB + Deployment server  +Topology Manager									--> Dharmesh / Smit					
Team -5 :  Authorization + Authentication + Monitoring + Platform BootStrap    ----> Gaurav / Tushar


Team --->         Input Format / Config Meta Flow
